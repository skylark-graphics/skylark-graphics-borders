{"version":3,"sources":["skylark-graphics-borders.js"],"names":[],"mappingsfile":"../skylark-graphics-borders.js","sourcesContent":["define('skylark-graphics-borders/borders',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"graphics.borders\",{});\r\n});\ndefine('skylark-graphics-borders/BorderColor',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-graphics-colors/Color\",\r\n    \"./borders\"\r\n], function(langx,Color,borders) {\r\n\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var BorderColor = langx.klass({\r\n        \"klassName\": \"BorderColor\",\r\n\r\n        \"left\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderColor(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderColor, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderColor(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderColor(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderColor(t,r,l,b);\r\n        }\r\n    });\r\n\r\n    BorderColor.fromCss = function(css) {\r\n       if (css.borderTopColor!==undefined &&\r\n           css.borderRightColor!==undefined &&\r\n           css.borderLeftColor!==undefined &&\r\n           css.borderBottomColor!==undefined ) {\r\n           return new BorderColor(\r\n                        css.borderTopColor,\r\n                        css.borderRightColor,\r\n                        css.borderLeftColor,\r\n                        css.borderBottomColor\r\n                    );\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderColor.toCss = function(bc,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bc) {\r\n            css.borderTopColor = bc.top.toString();\r\n            css.borderRightColor = bc.right.toString();\r\n            css.borderLeftColor = bc.left.toString();\r\n            css.borderBottomColor= bc.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderColor = BorderColor;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageOutset',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\s*/g;\r\n\r\n    var BorderImageOutset = langx.klass({\r\n\r\n        \"klassName\": \"BorderImageOutset\",\r\n\r\n        \"left\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderImageOutset(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equale: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            return !target ||\r\n                    this.left != target.left ||\r\n                    this.top != target.top ||\r\n                    this.right != target.right ||\r\n                    this.bottom != target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderImageOutset, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderImageOutset(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderImageOutset(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n            }\r\n            return new BorderImageOutset(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderImageOutset(0)\r\n    });\r\n\r\n    BorderImageOutset.fromCss = function(css) {\r\n        if (css.borderImageOutset) {\r\n            return BorderImageOutset.fromString(css.borderImageOutset);\r\n       } else {\r\n            return null;\r\n       }\r\n    };\r\n\r\n    BorderImageOutset.toCss = function(bio,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bio) {\r\n            css.borderImageOutset = bio.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImageOutset = BorderImageOutset;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageRepeat',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n\r\n\tvar BorderImageRepeat = [\"repeat\",\"round\",\"stretch\"];\r\n\t\r\n\tlangx.mixin(BorderImageRepeat,{\r\n\t\t\"repeat\" : 0,\r\n\t\t\"round\" : 1,\r\n\t\t\"stretch\" : 2\r\n\t});\r\n\r\n\treturn borders.BorderImageRepeat = BorderImageRepeat;\r\n\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageSlice',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderImageSlice = langx.klass({\r\n\r\n        \"klassName\": \"BorderImageSlice\",\r\n\r\n        \"left\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderImageSlice(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equale: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            return !target ||\r\n                    this.left != target.left ||\r\n                    this.top != target.top ||\r\n                    this.right != target.right ||\r\n                    this.bottom != target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left <0 ? \"fill\" : this.left.toString(),\r\n                t = this.top <0 ? \"fill\" : this.top.toString(),\r\n                r = this.right <0 ? \"fill\" : this.right.toString(),\r\n                b = this.bottom <0 ? \"fill\" : this.bottom.toString();\r\n\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderImageSlice, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderImageSlice(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderImageSlice(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                 default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n           }\r\n            if (t==\"fill\") {\r\n                t = -1;\r\n            }\r\n            if (r==\"fill\") {\r\n                r = -1;\r\n            }\r\n            if (l==\"fill\") {\r\n                l = -1;\r\n            }\r\n            if (b==\"fill\") {\r\n                b = -1;\r\n            }\r\n            return new BorderImageSlice(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderImageSlice(0)\r\n    });\r\n\r\n    BorderImageSlice.fromCss = function(css) {\r\n        if (css.borderImageSlice != undefined) {\r\n            return BorderImageSlice.fromString(css.borderImageSlice);\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderImageSlice.toCss = function(bis,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bis) {\r\n            css.borderImageSlice = bis.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImageSlice = BorderImageSlice;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImage',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-graphics-brushes/ImageBrush\",\r\n    \"./borders\",\r\n    \"./BorderImageOutset\",\r\n    \"./BorderImageRepeat\",\r\n    \"./BorderImageSlice\"\r\n],function(\r\n    langx,\r\n    BorderImageSlice,\r\n    borders,\r\n    ImageBrush,\r\n    BorderImageOutset,\r\n    BorderImageRepeat\r\n) {\r\n    var BorderImage = langx.klass({\r\n       \r\n        \"klassName\"  :   \"BorderImage\",\r\n\r\n        \"outset\"    :   {\r\n            type : BorderImageOutset,\r\n            \"get\" : function() {\r\n                return this._.outset;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.outset = v;\r\n            }            \r\n        },\r\n        \"repeat\" :   {\r\n            type : BorderImageRepeat,\r\n            \"get\" : function() {\r\n                return this._.repeat;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.repeat = v;\r\n            }            \r\n        },\r\n        \"slice\"    :   {\r\n            type : BorderImageSlice,\r\n            \"get\" : function() {\r\n                return this._.slice;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.slice = v;\r\n            }            \r\n        },\r\n        \"source\"  :   {\r\n            type : ImageBrush,\r\n            \"get\" : function() {\r\n                return this._.source;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.source = v;\r\n            }            \r\n        },\r\n        \"width\"    :   {\r\n            //type : MeasureValue,\r\n            \"get\" : function() {\r\n                return this._.width;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.width = v;\r\n            }            \r\n        },\r\n        \"_construct\" : function(params){\r\n            this._ = {\r\n                outset : params.outset,\r\n                repeat : params.repeat,\r\n                slice  : params.slice,\r\n                source : params.source,\r\n                width  : params.width\r\n            };\r\n        }\r\n    });\r\n\r\n    BorderImage.fromPlain = function(o) {\r\n\r\n       return new BorderImage({\r\n            outset : o.outset,\r\n            repeat    : o.repeat,\r\n            slice    : o.slice,\r\n            source      : o.source,\r\n            width: o.width\r\n        });\r\n    };\r\n\r\n    BorderImage.fromCss = function(css) {\r\n        return BorderImage.fromPlain({\r\n            outset  : css.borderImageOutset,\r\n            repeat  : css.borderImageRepeat,\r\n            slice   : css.borderImageSlice,\r\n            source  : css.borderImageSource,\r\n            width   : css.borderImageWidth\r\n        });\r\n    };\r\n\r\n    BorderImage.toCss = function(bi,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n\r\n        if (bi && bi.outset) {\r\n            css.borderImageOutset = bi.outset.toString();\r\n        }\r\n\r\n        if (bi && bi.repeat) {\r\n            css.borderImageRepeat = BorderImageRepeat[bi.repeat]; // bi.repeat.toString();\r\n        }\r\n\r\n        if (bi && bi.slice) {\r\n            css.borderImageSlice = bi.slice.toString();\r\n        }\r\n\r\n        if (bi && bi.source) {\r\n            css.borderImageSource = bi.source.toString();        \r\n        }\r\n\r\n        if (bi && bi.width) {\r\n            css.borderImageWidth = bi.width.toString();        \r\n        }\r\n\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImage = BorderImage;\r\n    \r\n}); \r\n\ndefine('skylark-graphics-borders/BorderRadius',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderRadius = langx.klass({\r\n        \"klassName\": \"BorderRadius\",\r\n\r\n        \"topLeft\": {\r\n            \"alias\" : \"tl\",\r\n            \"get\" : function() {\r\n                return this._.topLeft;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.topLeft = v;\r\n            }  \r\n        },\r\n\r\n        \"topRight\": {\r\n            \"alias\" : \"tr\",\r\n            \"get\" : function() {\r\n                return this._.topRight;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.topRight = v;\r\n            }  \r\n        },\r\n\r\n        \"bottomRight\": {\r\n            \"alias\" : \"br\",\r\n            \"get\" : function() {\r\n                return this._.bottomRight;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottomRight = v;\r\n            }  \r\n        },\r\n\r\n        \"bottomLeft\": {\r\n            \"alias\" : \"bl\",\r\n            \"get\" : function() {\r\n                return this._.bottomLeft;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottomLeft = v;\r\n            }  \r\n\r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.topLeft == this.topRight && this.topLeft == this.bottomRight && this.topLeft == this.bottomLeft) {\r\n                return this.topLeft;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"topLeft\": a,\r\n                \"topRight\": a,\r\n                \"bottomRight\": a,\r\n                \"bottomLeft\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderRadius(_.topLeft,_.topRight,_.bottomRight,_.bottomLeft);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.topLeft,this.topRight,this.bottomRight,this.bottomLeft];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"topLeft\"  : this.topLeft,\r\n                \"topRight\"  : this.topRight,\r\n                \"bottomRight\"  : this.bottomRight,\r\n                \"bottomLeft\"  : this.bottomLeft\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.topLeft.toString(),\r\n                t = this.topRight.toString(),\r\n                r = this.bottomRight.toString(),\r\n                b = this.bottomLeft.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"topLeft\": l,\r\n                \"topRight\": r,\r\n                \"bottomLeft\": t,\r\n                \"bottomRight\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderRadius, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderRadius(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderRadius(o.topLeft,o.topRight,o.bottomRight,o.bottomLeft);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderRadius(t,r,l,b);\r\n        }\r\n\r\n    });\r\n\r\n    BorderRadius.fromCss = function(css) {\r\n        if (css.borderTopLeftRadius != undefined &&\r\n            css.borderTopRightRadius != undefined &&\r\n            css.borderBottomRightRadius != undefined &&\r\n            css.borderBottomLeftRadius != undefined) {\r\n            return new BorderRadius(\r\n                        css.borderTopLeftRadius,\r\n                        css.borderTopRightRadius,\r\n                        css.borderBottomRightRadius,\r\n                        css.borderBottomLeftRadius\r\n                    );\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderRadius.toCss = function(br,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (br) {\r\n            css.borderTopLeftRadius = br.topLeft.toString();\r\n            css.borderTopRightRadius = br.topRight.toString();\r\n            css.borderBottomRightRadius = br.bottomRight.toString();\r\n            css.borderBottomLeftRadius = br.bottomLeft.toString();        \r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return BorderRadius;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderStyleType',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n\r\n\tvar BorderStyleType = [\"none\",\"solid\",\"ridge\",\"groove\",\"inset\",\"outset\",\"double\",\"dotted\",\"dashed\"];\r\n\r\n\tlangx.mixin(BorderStyleType,{\r\n\t\t\"none\" : 0,\r\n\t\t\"solid\" : 1, \r\n\t\t\"ridge\" : 2,\r\n\t\t\"groove\" : 3,\r\n\t\t\"inset\" : 4,\r\n\t\t\"outset\" : 5,\r\n\t\t\"double\" : 6,\r\n\t\t\"dotted\" : 7,\r\n\t\t\"dashed\" : 8\r\n\t});\r\n\r\n\treturn borders.BorderStyleType = BorderStyleType;\r\n\r\n});\r\n\ndefine('skylark-graphics-borders/BorderStyle',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\",\r\n    \"./BorderStyleType\"\r\n], function(langx,borders,BorderStyleType) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var BorderStyle = langx.klass({\r\n        \"klassName\": \"BorderStyle\",\r\n\r\n        \"left\": {\r\n            //\"type\": Color,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            //\"type\": Color,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            //\"type\": Color,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            //\"type\": Color,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._ = {\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            };\r\n        },\r\n\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderStyle(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = BorderStyleType[this.left], //l = this.left.toString(),\r\n                t = BorderStyleType[this.top], //t = this.top.toString(),\r\n                r = BorderStyleType[this.right],//r = this.right.toString(),\r\n                b = BorderStyleType[this.bottom]; //b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderStyle, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderStyle(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderStyle(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderStyle(t,r,l,b);\r\n        }\r\n    });\r\n\r\n    BorderStyle.fromCss = function(css) {\r\n        if (css.borderTopStyle != undefined &&\r\n            css.borderRightStyle != undefined &&\r\n            css.borderLeftStyle != undefined &&\r\n            css.borderBottomStyle != undefined) {\r\n           return new BorderStyle(\r\n                        BorderStyleType[css.borderTopStyle],\r\n                        BorderStyleType[css.borderRightStyle],\r\n                        BorderStyleType[css.borderLeftStyle],\r\n                        BorderStyleType[css.borderBottomStyle]\r\n                    );\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderStyle.toCss = function(bs,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bs) {\r\n            css.borderTopStyle = BorderStyleType[bs.top];//bs.top.toString();\r\n            css.borderRightStyle = BorderStyleType[bs.right];//bs.right.toString();\r\n            css.borderLeftStyle = BorderStyleType[bs.left];//bs.left.toString();\r\n            css.borderBottomStyle= BorderStyleType[bs.bottom]; //bs.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderStyle = BorderStyle;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderWidth',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    \r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderWidth = langx.klass({\r\n        \"klassName\": \"BorderWidth\",\r\n\r\n        \"left\": {\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderWidth(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n        },\r\n\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderWidth, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderWidth(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderWidth(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                 default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n           }\r\n            return new BorderWidth(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderWidth(0)\r\n    });\r\n\r\n    BorderWidth.fromCss = function(css) {\r\n       return new BorderWidth(\r\n                    css.borderTopWidth,\r\n                    css.borderRightWidth,\r\n                    css.borderLeftWidth,\r\n                    css.borderBottomWidth\r\n                );\r\n    };\r\n\r\n    BorderWidth.toCss = function(bw,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bw) {\r\n            css.borderTopWidth = bw.top.toString();\r\n            css.borderRightWidth = bw.right.toString();\r\n            css.borderLeftWidth = bw.left.toString();\r\n            css.borderBottomWidth = bw.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderWidth = BorderWidth;\r\n});\r\n\ndefine('skylark-graphics-borders/Border',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./borders\",\r\n\t\"./BorderColor\",\r\n\t\"./BorderImage\",\r\n\t\"./BorderRadius\",\r\n\t\"./BorderStyle\",\r\n\t\"./BorderWidth\"\r\n],function(langx,borders,BorderColor,BorderImage,BorderRadius,BorderStyle,BorderWidth) {\r\n\tvar Border = langx.klass({\r\n\t\t\"color\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderColor,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.color;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.color = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"image\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderImage,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.image;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.image = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"radius\"\t:\t{\r\n\t\t\t\"type\"\t\t:\tBorderRadius,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.radius;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.radius = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"style\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderStyle,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.style;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.style = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"width\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderWidth,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.width = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttoCss : function(css) {\r\n\t\t\treturn Border.toCss(this,css);\r\n\t\t},\r\n\r\n\t\t\"_construct\" : function(params){\r\n\t\t\tthis._ = {\r\n\t\t\t\tcolor : params.color,\r\n\t\t\t\timage \t  : params.image,\r\n\t\t\t\tradius \t  : params.radius,\r\n\t\t\t\tstyle \t  : params.style,\r\n\t\t\t\twidth: params.width\r\n\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tBorder.fromCss = function(css) {\r\n        return new Border({\r\n\t\t\tcolor \t: BorderColor.fromCss(css),\r\n\t\t\timage \t: BorderImage.fromCss(css),\r\n\t\t\tradius  : BorderRadius.fromCss(css),\r\n\t\t\tstyle \t: BorderStyle.fromCss(css),\r\n\t\t\twidth   : BorderWidth.fromCss(css)\r\n       });\r\n\t};\r\n\r\n\tBorder.toCss = function(border,css) {\r\n        if (!css) {\r\n        \tcss = {};\r\n        }\r\n\r\n        BorderColor.toCss(border.color,css);\r\n        BorderImage.toCss(border.image,css);\r\n        BorderRadius.toCss(border.radius,css);\r\n        BorderStyle.toCss(border.color,css);\r\n        BorderWidth.toCss(border.color,css);\r\n\r\n        return css;\r\n\t};\r\n\r\n\treturn borders.Border = Border;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-borders/main',[\r\n\t\"./borders\",\r\n\t\"./Border\",\r\n\t\"./BorderColor\",\r\n\t\"./BorderImage\",\r\n\t\"./BorderImageOutset\",\r\n\t\"./BorderImageRepeat\",\r\n\t\"./BorderImageSlice\",\r\n\t\"./BorderRadius\",\r\n\t\"./BorderStyle\",\r\n\t\"./BorderStyleType\",\r\n\t\"./BorderWidth\"\r\n],function(borders){\r\n\treturn borders;\r\n});\ndefine('skylark-graphics-borders', ['skylark-graphics-borders/main'], function (main) { return main; });\n\n"]}