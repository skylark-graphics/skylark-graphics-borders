{"version":3,"sources":["skylark-graphics-borders.js"],"names":["define","skylark","attach","langx","Color","borders","_WIDTHS_R","BorderColor","klass","klassName","left","type","alias","get","this","_","set","v","top","right","bottom","getAll","setAll","a","_setupAttributeValues","clone","equal","target","notEqual","s1","toString","s2","toArray","toPlain","t","r","l","b","_construct","undefined","mixin","fromArray","length","fromPlain","o","fromString","s","match","len","fromCss","css","borderTopColor","borderRightColor","borderLeftColor","borderBottomColor","toCss","bc","BorderImageOutset","Number","equale","Object","Zero","borderImageOutset","bio","BorderImageRepeat","repeat","round","stretch","BorderImageSlice","borderImageSlice","bis","ImageBrush","BorderImage","outset","slice","source","width","MeasureValue","params","borderImageRepeat","borderImageSource","borderImageWidth","bi","BorderRadius","topLeft","topRight","bottomRight","bottomLeft","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","br","BorderStyleType","none","solid","ridge","groove","inset","double","dotted","dashed","BorderStyle","borderTopStyle","borderRightStyle","borderLeftStyle","borderBottomStyle","bs","BorderWidth","borderTopWidth","borderRightWidth","borderLeftWidth","borderBottomWidth","bw","Border","color","image","radius","style","border","main"],"mappings":"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","file":"../skylark-graphics-borders.js","sourcesContent":["define('skylark-graphics-borders/borders',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"graphics.borders\",{});\r\n});\ndefine('skylark-graphics-borders/BorderColor',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-graphics-color\",\r\n    \"./borders\"\r\n], function(langx,Color,borders) {\r\n\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var BorderColor = langx.klass({\r\n        \"klassName\": \"BorderColor\",\r\n\r\n        \"left\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderColor(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(BorderColor, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderColor(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderColor(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderColor(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderColor(t,r,l,b);\r\n        }\r\n    });\r\n\r\n    BorderColor.fromCss = function(css) {\r\n       if (css.borderTopColor!==undefined &&\r\n           css.borderRightColor!==undefined &&\r\n           css.borderLeftColor!==undefined &&\r\n           css.borderBottomColor!==undefined ) {\r\n           return new BorderColor(\r\n                        css.borderTopColor,\r\n                        css.borderRightColor,\r\n                        css.borderLeftColor,\r\n                        css.borderBottomColor\r\n                    );\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderColor.toCss = function(bc,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bc) {\r\n            css.borderTopColor = bc.top.toString();\r\n            css.borderRightColor = bc.right.toString();\r\n            css.borderLeftColor = bc.left.toString();\r\n            css.borderBottomColor= bc.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderColor = BorderColor;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageOutset',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\s*/g;\r\n\r\n    var BorderImageOutset = langx.klass({\r\n\r\n        \"klassName\": \"BorderImageOutset\",\r\n\r\n        \"left\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderImageOutset(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equale: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            return !target ||\r\n                    this.left != target.left ||\r\n                    this.top != target.top ||\r\n                    this.right != target.right ||\r\n                    this.bottom != target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderImageOutset, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderImageOutset(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderImageOutset(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderImageOutset(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n            }\r\n            return new BorderImageOutset(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderImageOutset(0)\r\n    });\r\n\r\n    BorderImageOutset.fromCss = function(css) {\r\n        if (css.borderImageOutset) {\r\n            return BorderImageOutset.fromString(css.borderImageOutset);\r\n       } else {\r\n            return null;\r\n       }\r\n    };\r\n\r\n    BorderImageOutset.toCss = function(bio,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bio) {\r\n            css.borderImageOutset = bio.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImageOutset = BorderImageOutset;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageRepeat',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n\r\n\tvar BorderImageRepeat = [\"repeat\",\"round\",\"stretch\"];\r\n\t\r\n\tlangx.mixin(BorderImageRepeat,{\r\n\t\t\"repeat\" : 0,\r\n\t\t\"round\" : 1,\r\n\t\t\"stretch\" : 2\r\n\t});\r\n\r\n\treturn borders.BorderImageRepeat = BorderImageRepeat;\r\n\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImageSlice',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderImageSlice = langx.klass({\r\n\r\n        \"klassName\": \"BorderImageSlice\",\r\n\r\n        \"left\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Number,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderImageSlice(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equale: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            return !target ||\r\n                    this.left != target.left ||\r\n                    this.top != target.top ||\r\n                    this.right != target.right ||\r\n                    this.bottom != target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left <0 ? \"fill\" : this.left.toString(),\r\n                t = this.top <0 ? \"fill\" : this.top.toString(),\r\n                r = this.right <0 ? \"fill\" : this.right.toString(),\r\n                b = this.bottom <0 ? \"fill\" : this.bottom.toString();\r\n\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderImageSlice, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderImageSlice(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderImageSlice(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderImageSlice(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                 default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n           }\r\n            if (t==\"fill\") {\r\n                t = -1;\r\n            }\r\n            if (r==\"fill\") {\r\n                r = -1;\r\n            }\r\n            if (l==\"fill\") {\r\n                l = -1;\r\n            }\r\n            if (b==\"fill\") {\r\n                b = -1;\r\n            }\r\n            return new BorderImageSlice(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderImageSlice(0)\r\n    });\r\n\r\n    BorderImageSlice.fromCss = function(css) {\r\n        if (css.borderImageSlice != undefined) {\r\n            return BorderImageSlice.fromString(css.borderImageSlice);\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderImageSlice.toCss = function(bis,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bis) {\r\n            css.borderImageSlice = bis.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImageSlice = BorderImageSlice;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderImage',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-graphics-brushes/ImageBrush\",\r\n    \"./borders\",\r\n    \"./BorderImageOutset\",\r\n    \"./BorderImageRepeat\",\r\n    \"./BorderImageSlice\"\r\n],function(\r\n    langx,\r\n    BorderImageSlice,\r\n    borders,\r\n    ImageBrush,\r\n    BorderImageOutset,\r\n    BorderImageRepeat\r\n) {\r\n    var BorderImage = langx.klass({\r\n       \r\n        \"klassName\"  :   \"BorderImage\",\r\n\r\n        \"outset\"    :   {\r\n            type : BorderImageOutset,\r\n            \"get\" : function() {\r\n                return this._.outset;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.outset = v;\r\n            }            \r\n        },\r\n        \"repeat\" :   {\r\n            type : BorderImageRepeat,\r\n            \"get\" : function() {\r\n                return this._.repeat;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.repeat = v;\r\n            }            \r\n        },\r\n        \"slice\"    :   {\r\n            type : BorderImageSlice,\r\n            \"get\" : function() {\r\n                return this._.slice;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.slice = v;\r\n            }            \r\n        },\r\n        \"source\"  :   {\r\n            type : ImageBrush,\r\n            \"get\" : function() {\r\n                return this._.source;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.source = v;\r\n            }            \r\n        },\r\n        \"width\"    :   {\r\n            type : MeasureValue,\r\n            \"get\" : function() {\r\n                return this._.width;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.width = v;\r\n            }            \r\n        },\r\n        \"_construct\" : function(params){\r\n            this._ = {\r\n                outset : params.outset,\r\n                repeat : params.repeat,\r\n                slice  : params.slice,\r\n                source : params.source,\r\n                width  : params.width\r\n            };\r\n        }\r\n    });\r\n\r\n    BorderImage.fromPlain = function(o) {\r\n\r\n       return new BorderImage({\r\n            outset : o.outset,\r\n            repeat    : o.repeat,\r\n            slice    : o.slice,\r\n            source      : o.source,\r\n            width: o.width\r\n        });\r\n    };\r\n\r\n    BorderImage.fromCss = function(css) {\r\n        return BorderImage.fromPlain({\r\n            outset  : css.borderImageOutset,\r\n            repeat  : css.borderImageRepeat,\r\n            slice   : css.borderImageSlice,\r\n            source  : css.borderImageSource,\r\n            width   : css.borderImageWidth\r\n        });\r\n    };\r\n\r\n    BorderImage.toCss = function(bi,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n\r\n        if (bi && bi.outset) {\r\n            css.borderImageOutset = bi.outset.toString();\r\n        }\r\n\r\n        if (bi && bi.repeat) {\r\n            css.borderImageRepeat = bi.repeat.toString();\r\n        }\r\n\r\n        if (bi && bi.slice) {\r\n            css.borderImageSlice = bi.slice.toString();\r\n        }\r\n\r\n        if (bi && bi.source) {\r\n            css.borderImageSource = bi.source.toString();        \r\n        }\r\n\r\n        if (bi && bi.width) {\r\n            css.borderImageWidth = bi.width.toString();        \r\n        }\r\n\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderImage = BorderImage;\r\n    \r\n}); \r\n\ndefine('skylark-graphics-borders/BorderRadius',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderRadius = langx.klass({\r\n        \"klassName\": \"BorderRadius\",\r\n\r\n        \"topLeft\": {\r\n            \"alias\" : \"tl\",\r\n            \"get\" : function() {\r\n                return this._.topLeft;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.topLeft = v;\r\n            }  \r\n        },\r\n\r\n        \"topRight\": {\r\n            \"alias\" : \"tr\",\r\n            \"get\" : function() {\r\n                return this._.topRight;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.topRight = v;\r\n            }  \r\n        },\r\n\r\n        \"bottomRight\": {\r\n            \"alias\" : \"br\",\r\n            \"get\" : function() {\r\n                return this._.bottomRight;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottomRight = v;\r\n            }  \r\n        },\r\n\r\n        \"bottomLeft\": {\r\n            \"alias\" : \"bl\",\r\n            \"get\" : function() {\r\n                return this._.bottomLeft;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottomLeft = v;\r\n            }  \r\n\r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.topLeft == this.topRight && this.topLeft == this.bottomRight && this.topLeft == this.bottomLeft) {\r\n                return this.topLeft;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"topLeft\": a,\r\n                \"topRight\": a,\r\n                \"bottomRight\": a,\r\n                \"bottomLeft\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderRadius(_.topLeft,_.topRight,_.bottomRight,_.bottomLeft);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.topLeft,this.topRight,this.bottomRight,this.bottomLeft];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"topLeft\"  : this.topLeft,\r\n                \"topRight\"  : this.topRight,\r\n                \"bottomRight\"  : this.bottomRight,\r\n                \"bottomLeft\"  : this.bottomLeft\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.topLeft.toString(),\r\n                t = this.topRight.toString(),\r\n                r = this.bottomRight.toString(),\r\n                b = this.bottomLeft.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"topLeft\": l,\r\n                \"topRight\": r,\r\n                \"bottomLeft\": t,\r\n                \"bottomRight\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderRadius, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderRadius(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderRadius(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderRadius(o.topLeft,o.topRight,o.bottomRight,o.bottomLeft);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderRadius(t,r,l,b);\r\n        }\r\n\r\n    });\r\n\r\n    BorderRadius.fromCss = function(css) {\r\n        if (css.borderTopLeftRadius != undefined &&\r\n            css.borderTopRightRadius != undefined &&\r\n            css.borderBottomRightRadius != undefined &&\r\n            css.borderBottomLeftRadius != undefined) {\r\n            return new BorderRadius(\r\n                        css.borderTopLeftRadius,\r\n                        css.borderTopRightRadius,\r\n                        css.borderBottomRightRadius,\r\n                        css.borderBottomLeftRadius\r\n                    );\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderRadius.toCss = function(br,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (br) {\r\n            css.borderTopLeftRadius = br.topLeft.toString();\r\n            css.borderTopRightRadius = br.topRight.toString();\r\n            css.borderBottomRightRadius = br.bottomRight.toString();\r\n            css.borderBottomLeftRadius = br.bottomLeft.toString();        \r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return BorderRadius;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderStyleType',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n\r\n\tvar BorderStyleType = [\"none\",\"solid\",\"ridge\",\"groove\",\"inset\",\"outset\",\"double\",\"dotted\",\"dashed\"];\r\n\r\n\tlangx.mixin(BorderStyleType,{\r\n\t\t\"none\" : 0,\r\n\t\t\"solid\" : 1, \r\n\t\t\"ridge\" : 2,\r\n\t\t\"groove\" : 3,\r\n\t\t\"inset\" : 4,\r\n\t\t\"outset\" : 5,\r\n\t\t\"double\" : 6,\r\n\t\t\"dotted\" : 7,\r\n\t\t\"dashed\" : 8\r\n\t});\r\n\r\n\treturn borders.BorderStyleType = BorderStyleType;\r\n\r\n});\r\n\ndefine('skylark-graphics-borders/BorderStyle',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\",\r\n    \"./BorderStyleType\"\r\n], function(langx,borders,BorderStyleType) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var BorderStyle = langx.klass({\r\n        \"klassName\": \"BorderStyle\",\r\n\r\n        \"left\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"type\": Color,\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._ = {\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            };\r\n        },\r\n\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderStyle(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderStyle, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderStyle(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderStyle(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderStyle(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new BorderStyle(t,r,l,b);\r\n        }\r\n    });\r\n\r\n    BorderStyle.fromCss = function(css) {\r\n        if (css.borderTopStyle != undefined &&\r\n            css.borderRightStyle != undefined &&\r\n            css.borderLeftStyle != undefined &&\r\n            css.borderBottomStyle != undefined) {\r\n           return new BorderStyle(\r\n                        css.borderTopStyle,\r\n                        css.borderRightStyle,\r\n                        css.borderLeftStyle,\r\n                        css.borderBottomStyle\r\n                    );\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    BorderStyle.toCss = function(bs,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bs) {\r\n            css.borderTopStyle = bs.top.toString();\r\n            css.borderRightStyle = bs.right.toString();\r\n            css.borderLeftStyle = bs.left.toString();\r\n            css.borderBottomStyle= bs.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderStyle = BorderStyle;\r\n});\r\n\ndefine('skylark-graphics-borders/BorderWidth',[\r\n    \"skylark-langx/langx\",\r\n    \"./borders\"\r\n], function(langx,borders) {\r\n    \r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d+\\D*\\s*/g;\r\n\r\n    var BorderWidth = langx.klass({\r\n        \"klassName\": \"BorderWidth\",\r\n\r\n        \"left\": {\r\n            \"alias\" : \"l\",\r\n            \"get\" : function() {\r\n                return this._.left;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.left = v;\r\n            }            \r\n        },\r\n\r\n        \"top\": {\r\n            \"alias\" : \"t\",\r\n            \"get\" : function() {\r\n                return this._.top;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.top = v;\r\n            }            \r\n        },\r\n\r\n        \"right\": {\r\n            \"alias\" : \"r\",\r\n            \"get\" : function() {\r\n                return this._.right;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.right = v;\r\n            }            \r\n        },\r\n\r\n        \"bottom\": {\r\n            \"alias\" : \"b\",\r\n            \"get\" : function() {\r\n                return this._.bottom;\r\n            },\r\n            \"set\" : function(v) {\r\n                this._.bottom = v;\r\n            }            \r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._setupAttributeValues({\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            });\r\n        },\r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new BorderWidth(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n            if (!target) {\r\n                return false;\r\n            } \r\n            var s1 = this.toString(),\r\n                s2 = target.toString();\r\n            return s1 != s2 ;\r\n        },\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"t\"  : this.top,\r\n                \"r\"  : this.right,\r\n                \"l\"  : this.left,\r\n                \"b\"  : this.bottom\r\n            }\r\n        },\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n        },\r\n\r\n        \"_construct\": function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l !== undefined) {\r\n                    b = l;\r\n                    l = r;\r\n                } else if (r !== undefined) {\r\n                    b = t;\r\n                    l = r;\r\n\r\n                } else if (t !== undefined) {\r\n                    b = l = r = t;\r\n                } else {\r\n                    b = l = r = t = 0;\r\n                }\r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(BorderWidth, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new BorderWidth(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new BorderWidth(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new BorderWidth(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a ? a.length : 0;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n                 default :\r\n                    t = r = l = b = null;\r\n                    break;                    \r\n           }\r\n            return new BorderWidth(t,r,l,b);\r\n        },\r\n\r\n        Zero: new BorderWidth(0)\r\n    });\r\n\r\n    BorderWidth.fromCss = function(css) {\r\n       return new BorderWidth(\r\n                    css.borderTopWidth,\r\n                    css.borderRightWidth,\r\n                    css.borderLeftWidth,\r\n                    css.borderBottomWidth\r\n                );\r\n    };\r\n\r\n    BorderWidth.toCss = function(bw,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (bw) {\r\n            css.borderTopWidth = bw.top.toString();\r\n            css.borderRightWidth = bw.right.toString();\r\n            css.borderLeftWidth = bw.left.toString();\r\n            css.borderBottomWidth = bw.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return borders.BorderWidth = BorderWidth;\r\n});\r\n\ndefine('skylark-graphics-borders/Border',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./borders\",\r\n\t\"./BorderColor\",\r\n\t\"./BorderImage\",\r\n\t\"./BorderRadius\",\r\n\t\"./BorderStyle\",\r\n\t\"./BorderWidth\"\r\n],function(langx,borders,BorderColor,BorderImage,BorderRadius,BorderStyle,BorderWidth) {\r\n\tvar Border = langx.klass({\r\n\t\t\"color\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderColor,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.color;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.color = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"image\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderImage,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.image;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.image = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"radius\"\t:\t{\r\n\t\t\t\"type\"\t\t:\tBorderRadius,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.radius;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.radius = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"style\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderStyle,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.style;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.style = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"width\"\t:\t{\r\n\t\t\t\"type\"\t:\tBorderWidth,\r\n\t\t\t\"get\" : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t},\r\n\t\t\t\"set\" : function(v) {\r\n\t\t\t\tthis._.width = v;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttoCss : function(css) {\r\n\t\t\treturn Border.toCss(this,css);\r\n\t\t},\r\n\r\n\t\t\"_construct\" : function(params){\r\n\t\t\tthis._ = {\r\n\t\t\t\tcolor : params.color,\r\n\t\t\t\timage \t  : params.image,\r\n\t\t\t\tradius \t  : params.radius,\r\n\t\t\t\tstyle \t  : params.style,\r\n\t\t\t\twidth: params.width\r\n\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tBorder.fromCss = function(css) {\r\n        return new Border({\r\n\t\t\tcolor \t: BorderColor.fromCss(css),\r\n\t\t\timage \t: BorderImage.fromCss(css),\r\n\t\t\tradius  : BorderRadius.fromCss(css),\r\n\t\t\tstyle \t: BorderStyle.fromCss(css),\r\n\t\t\twidth   : BorderWidth.fromCss(css)\r\n       });\r\n\t};\r\n\r\n\tBorder.toCss = function(border,css) {\r\n        if (!css) {\r\n        \tcss = {};\r\n        }\r\n\r\n        BorderColor.toCss(border.color,css);\r\n        BorderImage.toCss(border.image,css);\r\n        BorderRadius.toCss(border.radius,css);\r\n        BorderStyle.toCss(border.color,css);\r\n        BorderWidth.toCss(border.color,css);\r\n\r\n        return css;\r\n\t};\r\n\r\n\treturn borders.Border = Border;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-borders/main',[\r\n\t\"./borders\",\r\n\t\"./Border\",\r\n\t\"./BorderColor\",\r\n\t\"./BorderImage\",\r\n\t\"./BorderImageOutset\",\r\n\t\"./BorderImageRepeat\",\r\n\t\"./BorderImageSlice\",\r\n\t\"./BorderRadius\",\r\n\t\"./BorderStyle\",\r\n\t\"./BorderStyleType\",\r\n\t\"./BorderWidth\"\r\n],function(borders){\r\n\treturn borders;\r\n});\ndefine('skylark-graphics-borders', ['skylark-graphics-borders/main'], function (main) { return main; });\n\n"]}